extern crate glutin;

use input::keyboard::KeyCode;
use self::glutin::VirtualKeyCode as K;

/// Maps Glutin's key to Bigseed's key.
pub fn normalize_key(keycode: K) -> KeyCode {
    match keycode {
        K::Key0 => KeyCode::D0,
        K::Key1 => KeyCode::D1,
        K::Key2 => KeyCode::D2,
        K::Key3 => KeyCode::D3,
        K::Key4 => KeyCode::D4,
        K::Key5 => KeyCode::D5,
        K::Key6 => KeyCode::D6,
        K::Key7 => KeyCode::D7,
        K::Key8 => KeyCode::D8,
        K::Key9 => KeyCode::D9,
        K::A => KeyCode::A,
        K::B => KeyCode::B,
        K::C => KeyCode::C,
        K::D => KeyCode::D,
        K::E => KeyCode::E,
        K::F => KeyCode::F,
        K::G => KeyCode::G,
        K::H => KeyCode::H,
        K::I => KeyCode::I,
        K::J => KeyCode::J,
        K::K => KeyCode::K,
        K::L => KeyCode::L,
        K::M => KeyCode::M,
        K::N => KeyCode::N,
        K::O => KeyCode::O,
        K::P => KeyCode::P,
        K::Q => KeyCode::Q,
        K::R => KeyCode::R,
        K::S => KeyCode::S,
        K::T => KeyCode::T,
        K::U => KeyCode::U,
        K::V => KeyCode::V,
        K::W => KeyCode::W,
        K::X => KeyCode::X,
        K::Y => KeyCode::Y,
        K::Z => KeyCode::Z,
        K::Apostrophe => KeyCode::Unknown,
        K::Backslash => KeyCode::Backslash,
        K::Back => KeyCode::Backspace,
        K::Delete => KeyCode::Delete,
        K::Comma => KeyCode::Comma,
        K::Down => KeyCode::Down,
        K::End => KeyCode::End,
        K::Return => KeyCode::Return,
        K::Equals => KeyCode::Equals,
        K::Escape => KeyCode::Escape,
        K::F1 => KeyCode::F1,
        K::F2 => KeyCode::F2,
        K::F3 => KeyCode::F3,
        K::F4 => KeyCode::F4,
        K::F5 => KeyCode::F5,
        K::F6 => KeyCode::F6,
        K::F7 => KeyCode::F7,
        K::F8 => KeyCode::F8,
        K::F9 => KeyCode::F9,
        K::F10 => KeyCode::F10,
        K::F11 => KeyCode::F11,
        K::F12 => KeyCode::F12,
        K::F13 => KeyCode::F13,
        K::F14 => KeyCode::F14,
        K::F15 => KeyCode::F15,
        K::Numpad0 => KeyCode::NumPad0,
        K::Numpad1 => KeyCode::NumPad1,
        K::Numpad2 => KeyCode::NumPad2,
        K::Numpad3 => KeyCode::NumPad3,
        K::Numpad4 => KeyCode::NumPad4,
        K::Numpad5 => KeyCode::NumPad5,
        K::Numpad6 => KeyCode::NumPad6,
        K::Numpad7 => KeyCode::NumPad7,
        K::Numpad8 => KeyCode::NumPad8,
        K::Numpad9 => KeyCode::NumPad9,
        K::NumpadComma => KeyCode::NumPadDecimal,
        K::Divide => KeyCode::NumPadDivide,
        K::Multiply => KeyCode::NumPadMultiply,
        K::Subtract => KeyCode::NumPadMinus,
        K::Add => KeyCode::NumPadPlus,
        K::NumpadEnter => KeyCode::NumPadEnter,
        K::NumpadEquals => KeyCode::NumPadEquals,
        K::LShift => KeyCode::LShift,
        K::LControl => KeyCode::LCtrl,
        K::LAlt => KeyCode::LAlt,
        K::LMenu => KeyCode::LGui,
        K::RShift => KeyCode::RShift,
        K::RControl => KeyCode::RCtrl,
        K::RAlt => KeyCode::RAlt,
        K::RMenu => KeyCode::RGui,
        K::Home => KeyCode::Home,
        K::Insert => KeyCode::Insert,
        K::Left => KeyCode::Left,
        K::LBracket => KeyCode::LeftBracket,
        K::Minus => KeyCode::Minus,
        K::Numlock => KeyCode::NumLockClear,
        K::PageDown => KeyCode::PageDown,
        K::PageUp => KeyCode::PageUp,
        K::Pause => KeyCode::Pause,
        K::Period => KeyCode::Period,
        K::Right => KeyCode::Right,
        K::RBracket => KeyCode::RightBracket,
        K::Semicolon => KeyCode::Semicolon,
        K::Slash => KeyCode::Slash,
        K::Space => KeyCode::Space,
        K::Tab => KeyCode::Tab,
        K::Up => KeyCode::Up,
        _ => KeyCode::Unknown,
    }
}
